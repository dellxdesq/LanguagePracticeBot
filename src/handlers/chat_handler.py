from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram import F
from settings.states import ChatStates
from service.ai_service import ChatGPT42AI
from handlers.cancel_handler import cancel_command
from settings.shared import db
from settings.constants import SENDERS
import asyncio
import re
router = Router()
ollama_ai = ChatGPT42AI()


@router.message(F.text, ChatStates.CHAT)
async def chat_with_ai(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "anonymous"  # –ò–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å None
    user_message = message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–∞
    if user_message.lower() == "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥" or user_message == "/clear":
        await cancel_command(message, state)
        return

    user = await db.get_user(user_id=user_id, username=username)
    active_chat = await db.get_active_chat(user_id=user_id, username=username, chat_state=ChatStates.CHAT.state.split(":")[1])

    chat_id = active_chat.chat_id
    history = await db.get_chat_history(chat_id=chat_id)
    ollama_ai.set_history(history)

    current_state = await state.get_state()
    state_name = current_state.split(":")[1] if current_state else None

    await db.save_message(
        user_id=user_id,
        username=username,
        sender=SENDERS["user"],
        content=user_message,
        chat_state=state_name,
        chat_id=chat_id
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "–ü–µ—á–∞—Ç–∞–µ—Ç..."
        typing_message = await message.answer("–ü–µ—á–∞—Ç–∞–µ—Ç...‚úçüèª")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_response = await ollama_ai.get_response(user_message)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–µ—á–∞—Ç–∞–µ—Ç..."
        await typing_message.delete()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_response = format_ai_response_html(ai_response)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.save_message(
            user_id=user_id,
            username=username,
            sender=SENDERS["bot"],
            content=ai_response,
            chat_state=state_name,
            chat_id=chat_id
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(formatted_response, parse_mode='HTML')
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def format_ai_response_html(ai_response):
    lines = ai_response.splitlines()  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    formatted_lines = []

    for line in lines:
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å **, —É–±–∏—Ä–∞–µ–º –∏—Ö
        if line.startswith("**"):
            line = line[2:].strip()
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å *, —É–±–∏—Ä–∞–µ–º –µ—ë
        elif line.startswith("*"):
            line = line[1:].strip()

        # –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–≤–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö "—Ç–µ–∫—Å—Ç" –Ω–∞ <b>—Ç–µ–∫—Å—Ç</b>
        line = re.sub(r'"(.*)"', r'<b>\1</b>', line)

        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ ** –≤ —Å—Ç—Ä–æ–∫–µ
        line = line.replace("**", "")
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ * –≤ —Å—Ç—Ä–æ–∫–µ

        line = line.replace("*", "")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        formatted_lines.append(line)

    return "\n".join(formatted_lines)

